# doctest file for def matrix_divided(matrix, div) which is a function that divides elements of a matrix
===============================

How to Use 2-matrix_divided.py
===============================
This python file has one function called matrix_divided
The function takes two parameters matrix which is a list of list of integers and div which is a value to divide every other list member with
The function the returns  new_matrix

Numbers
=======

Importing the matrix_divide function from module
::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Checking its divisibility using an integer
::
	>>> matrix = [[10, 15, 5], [50, 45, 25]]
	>>> print(matrix_divided(matrix, 5))
	[[2, 3, 1], [10, 9, 5]]

Having a matrix with floats
::
	>>> matrix = [[1.2, 5.6, 2.2], [4.8, 15, 7.2]]
	>>> print(matrix_divided(matrix, 2))
	[[0.6, 2.8, 1.1], [2.4, 7.5, 3.6]

A matrix that has integers and floats mixed up
::
	>>> matrix = [[-5.6, 5, 23.4], [4, -12.4, 7.2]]
	>>> print(matrix_divided(matrix, 6))
	[[-0.93, 0.83, 3.9], [0.67, -2.07, 1.2]]


Invalid matches
===============
In case of any invalid matches or input, the module should raise an appropriate error

when the div is zero
::
	>>> matrix = [[10, 18, 5], [9, 17, 4]]
	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

When the div is not a number (int/float)
::
	>>> matrix = [[10, 18, 5], [9, 17, 4]]
	>>> print(matrix_divided(matrix, "div"))
	Traceback (most recent call last):
	TypeError: div must be a number

When we have a matrix with rows of different sizes
::
	>>> matrix = [[10, 18, 5], [9, 17, 4, 56]]
	>>> print(matrix_divided(matrix, 5))
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

When the matrix passed has other datatypes apart from ints/floats
::
# >>> matrix = [[10, 18, 5, 8], [9, 5, m, 56]]
# >>> print(matrix_divided(matrix, 5))
# Traceback (most recent call last):
# TypeError: matrix must be a matrix (list of lists) of integers/floats

